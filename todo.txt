Dreams:
- implement file update/creation/deletion checking using inotify
  (see sun.nio.fs.LinuxWatchService for an example)
- implement file update/creation/deletion checking using java.nio.file in java 7
- implement concurrency through Actors
- formal test infrastructure

For Deployment:
- finish implementing consistency checks upon writes
  - modify messages to include a second hash
  - write logic to verify BOTH old and new hashes upon transfer
  - write logic/messages to reject invalid updates
  - write logic for hash verification on client updates
  - figure out how to handle conflicted copies
- handle Client disconnection and reconnection smoothly
  - require both timeout and broken socket handling
  - Client should be able to operate offline the same as online, minus syncing to Server
  - upon reconnection perform usual handshake.
  - from Server's perspective, Client reconnection and connection should look identical

TODO:
- check hash on a client's files upon connection to the server
- implement version vectors for already-connected clients
- file level locking instead of hash map level lockings
- implement encryption with nonces
- (more) gracefully handle errors
- check hashes upon file transfers and writes to detect errors
- avoid subtle bugs

Design Questions:
- what to do about clients connecting with additional files in their home folders?
  currently they are ignored, although deletion will trigger a RemovedMessage

Outstanding bugs:
- deleting a non-empty directory does not behave correctly
- possible race condition: updating files during reads