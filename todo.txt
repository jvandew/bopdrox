Dreams:
- implement file update/creation/deletion checking using inotify
  (see sun.nio.fs.LinuxWatchService for an example)
- implement file update/creation/deletion checking using java.nio.file in java 7
- implement concurrency through Actors

For Deployment:
- finish implementing consistency checks upon writes
  - write logic to verify BOTH old and new hashes upon transfer
  - write logic/messages to reject invalid updates
  - write logic for hash verification on client updates
  - figure out how to handle conflicted copies
- handle Client disconnection and reconnection smoothly
  - require both timeout and broken socket handling
  - Client should be able to operate offline the same as online, minus syncing to Server
  - upon reconnection perform usual handshake.
  - from Server's perspective, Client reconnection and connection should look identical

TODO:
- typedef things for simplicity
- flesh out test infrastructure (should explicitly verify file contents)
- create a global configuration object
- use the filesystem to cache transfers so we don't OOM on large files
- transfers get ~1.25 MB/s on my home network; look into improving this
- debug mode to log operations rather than printing a summary
- check hash on a client's files upon connection to the server
- implement version vectors for already-connected clients
- file level locking instead of hash map level lockings
- implement encryption with nonces
- (more) gracefully handle errors
- check hashes upon file transfers and writes to detect errors
- avoid subtle bugs

Design Questions:
- what to do about clients connecting with additional files in their home folders?
- move from hashmaps to tries for metadata storage? a trie would certainly
be a more intuitive representation of the filesystem tree, however for most
usage we will probably be storing many more files than directories, meaning
a switch would likely not cause an appreciable efficiency increase (other than
a potentially lower memory footprint)